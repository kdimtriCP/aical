// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"github.com/kdimtricp/aical/internal/biz"
	"github.com/kdimtricp/aical/internal/conf"
	"github.com/kdimtricp/aical/internal/data"
	"github.com/kdimtricp/aical/internal/server"
	"github.com/kdimtricp/aical/internal/service"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, confData *conf.Data, google *conf.Google, openAI *conf.OpenAI, cron *conf.Cron, logger log.Logger) (*kratos.App, func(), error) {
	db, err := data.NewDB(confData)
	if err != nil {
		return nil, nil, err
	}
	client, err := data.NewCache(confData)
	if err != nil {
		return nil, nil, err
	}
	dataData, cleanup, err := data.NewData(db, client, logger)
	if err != nil {
		return nil, nil, err
	}
	authRepo := data.NewAuthRepo(dataData, logger)
	authUsecase := biz.NewAuthUsecase(authRepo, logger)
	googleRepo, cleanup2, err := data.NewGoogleRepo(google, logger)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	googleUseCase := biz.NewGoogleUseCase(googleRepo, logger)
	authService := service.NewAuthService(logger, authUsecase, googleUseCase)
	userRepo := data.NewUserRepo(dataData, logger)
	userUseCase := biz.NewUserUseCase(userRepo, logger)
	userService := service.NewUserService(logger, userUseCase, googleUseCase)
	calendarRepo := data.NewCalendarRepo(dataData, logger)
	chatUseCase := biz.NewChatUseCase(openAI, logger, googleRepo, calendarRepo)
	chatService := service.NewChatService(chatUseCase, googleUseCase, userUseCase, logger)
	httpServer := server.NewHTTPServer(confServer, logger, authService, userService, chatService)
	grpcServer := server.NewGRPCServer(confServer, logger)
	calendarUseCase := biz.NewCalendarUseCase(calendarRepo, logger)
	eventRepo := data.NewEventRepo(dataData, logger)
	eventUseCase := biz.NewEventUseCase(eventRepo, logger)
	eventHistoryRepo := data.NewEventHistoryRepo(dataData, logger)
	eventHistoryUseCase := biz.NewEventHistoryUseCase(eventHistoryRepo, logger)
	openAIUseCase := biz.NewOpenAIUseCase(openAI, logger, googleRepo)
	cronService := service.NewCronService(cron, logger, userUseCase, calendarUseCase, eventUseCase, eventHistoryUseCase, googleUseCase, openAIUseCase)
	cronServer, err := server.NewCronServer(cron, logger, cronService)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	app := newApp(logger, httpServer, grpcServer, cronServer)
	return app, func() {
		cleanup2()
		cleanup()
	}, nil
}
